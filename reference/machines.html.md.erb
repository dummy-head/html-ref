---
title: Machines
layout: docs
sitemap: false
nav: firecracker
---

Machines are customizable [Firecracker VMs](https://firecracker-microvm.github.io/) - the building blocks of Fly applications. Machines give you efficient, low-level control over VM provisioning, supported by Fly.io infrastructure and networking features.

This document covers usage of the Machines REST API to start, stop, update and interact with machines. For the impatient, [flyctl also provides commands](https://fly.io/docs/flyctl/machine/) for experimenting with the API.

See all possible machine states [in the table below](#machine-states).

## Connecting to the API

The Machines API endpoint requires a connection to your Fly private network - either via a WireGuard VPN or using `flyctl proxy`.

This guide assumes that you have `flyctl` and `curl` installed, and have authenticated to the Fly.io platform.

### Connecting via WireGuard

This method requires more setup but gives you direct access to machines over the Wireguard VPN.

First, follow the [instructions](/docs/reference/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly network. We recommend WireGuard because you can directly test your machines from your local machine.

Once you're connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`

### Connecting via `flyctl proxy`

For quick testing of this API, proxy a local port to the internal API endpoint. Pick any organization when asked.

```cmd
flyctl proxy 4280 _api.internal
```

With the above command running, in a separate terminal, try this to confirm you can access the API:

```
curl http://127.0.0.1:4280
```

### Setting up the environment
Set these environment variables to make the following commands easier to use.

```
export FLY_API_HOSTNAME="_api.internal:4280" # or set to `127.0.0.1:4280` when using 'flyctl proxy'
export FLY_API_TOKEN=$(fly auth token)
```

You'll still need to replace the application name and machine ID for commands to work.

### Authentication

All requests must include the the fly API Token in the HTTP Headers as follows:

```
Authorization: Bearer <fly_api_token>
```

### Create a Fly application

Machines must be associated with a Fly application. App names must be unique.

<%= partial "machines/create_app" %>

### Allocate an IP address

If you intend for machines to be accessible to the internet, you'll need to allocate an IP address to the application. Currently
this is done using `flyctl` or the [Fly GraphQL API](https://api.fly.io/graphql). Example:

```cmd
flyctl ips allocate-v4 -a my-awesome-machines-app
```
```out
TYPE ADDRESS    REGION CREATED AT
v4   37.16.9.52 global 7s ago
```

Shortly after allocating, the app will be available at `my-awesome-machines-app.fly.dev`.

### Get application details

Get details about an application, like its organization slug and name. Also, to check if the app exists!
<%= partial "machines/get_app" %>

### Create and start a machine

Create and start a machine immediately. This is where you configure the machine characteristics, like its CPU and memory. You
can also allow connections from the internet through the Fly proxy. Learn more about this behavior in the [networking section](#networking).

Following this call, you can make a [blocking API request](#wait-for-a-machine-to-start) to wait for a machine to start.

The only required parameter is `image` in the `config` object. Other parameters:

`name`: Unique name for this machine. If omitted, one is generated for you.

`region`: The target region. Omitting this param launches in the same region as your WireGuard peer connection (somewhere near you).

`config`: An object defining the machine configuration. Options

* `image`: The Docker image to run
* `guest`: An object with the following options:
  - `cpus`: Number of vCPUs (default 1)
  - `memory_mb`: Memory in megabytes as multiples of 256 (default 256)


* `services`: An array of objects that define a single network service. Check the [machines networking section](#networking) for more information. Options:

  - `protocol`: `tcp` or `udp`. [Learn more about running raw TCP/UDP services](https://fly.io/docs/app-guides/udp-and-tcp/).
  - `internal_port`: Port the machine VM listens on
  - `ports`: An array of objects defining the service's ports and associated handlers. Options:
      + `port`: Public-facing port number
      + `handlers`: Array of [connection handlers](https://fly.io/docs/reference/services/#connection-handlers) for TCP-based services.

<%= partial "machines/launch" %>

### Wait for a machine to start

Wait for a created machine to start. This request will block for up to 60 seconds. Set a longer timeout with the `timeout` parameter.

<%= partial "machines/wait" %>

### Get a Machine

Given a machine ID, fetch details about it.

<%= partial "machines/get" %>

### Update a Machine

Neither `region` nor `name` may be updated. Updating the `config` requires
specifying the complete config.

<%= partial "machines/update" %>

### Stop a Machine

Stopping a machine will shut down the VM, but not destroy it. The VM may be started again with `machines/start`.

<%= partial "machines/stop" %>

### Start a Machine

Start a previously stopped machine.

<%= partial "machines/start" %>

### Delete a Machine permanently

Delete a machine, never to be seen again. This action cannot be undone!

<%= partial "machines/delete" %>

### List machines for an app

<%= partial "machines/list" %>

### Delete a Fly application

Machines should be stopped before attempting deletion. Pass `force=true` to stop and delete immediately.

<%= partial "machines/delete_app" %>

## Notes on Networking

Machines are closed to the public internet by default. To make them accessible via the associated application, you need to:

* Allocate an IP address to the application
* Adding one or more `services` to the machine config with ports and handlers, as seen in the launch example here

For an application with a single machine, all requests will be routed to that machine. A machine in the `stopped` state will be started up
automatically when a request arrives.

For an application with multiple machines with the same configuration, requests will be distributed across them. Warm-start behavior in this situation
is not well-defined now, so should not be relied upon for apps with multiple machines.

## Machine States

This table explains the possible machine states. A machine may only be in one state at a time.

<table class="table-stripe table-stretch table-pad text-lg whitespace-nowrap m-0">
  <tbody>
    <tr>
      <td class="font-bold">created</td>
      <td>Initial status</td>
    </tr>
    <tr>
      <td class="font-bold">started</td>
      <td>Running and network-accesible</td>
    </tr>
    <tr>
      <td class="font-bold">stopping</td>
      <td>Transitioning from `started` to `stopped`</td>
    </tr>
    <tr>
      <td class="font-bold">stopped</td>
      <td>Exited, either on its own or explicitly stopped</td>
    </tr>
    <tr>
      <td class="font-bold">replacing</td>
      <td>User-initiated configuration change (image, VM size, etc.) in progress</td>
    </tr>
    <tr>
      <td class="font-bold">destroying</td>
      <td>User asked for the machine to be completely removed</td>
    </tr>
    <tr>
      <td class="font-bold">destroyed</td>
      <td>No longer exists</td>
    </tr>
    </tbody>
  </table>


Internal note: the replaced state is only possible when requesting a specific instance_id.