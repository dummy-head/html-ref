---
title: "Deploy a Laravel Application"
layout: docs
sitemap: false
nav: firecracker
---

<% app_name = "fly-hello-laravel" %>
<%= partial "partials/intro", locals: { runtime: "Laravel", link: "https://laravel.com" } %>

## _Prepare a Laravel app_

Bring your own Laravel app, or create a new one!

If you want to start fresh, here's how to setup a new application. You'll need PHP 8+ and [composer](https://getcomposer.org/) installed locally. You can check your PHP version using `php --version`.

```cmd
composer create-project laravel/laravel fly-laravel
cd fly-laravel
php artisan serve
```

You should be able to visit `http://localhost:8000` and see the home page.


## _Deploy to Fly.io_

### Install Fly

<%= partial "partials/flyctl" %>

### Launch

Next, run `fly launch` to automagically configure your app for Fly.

1. You'll be asked to provide secret `APP_KEY`. You can generate one using `php artisan key:generate --show`.
2. When asked if you want to deploy now, say **No**. 

If you have other environment variables to set, you can edit the `fly.toml` file and add them.

```toml
[env]
# Set any env vars you want here
# Caution: Don't add secrets here
APP_URL = "https://fly-hello-laravel.fly.dev"
```

Replace this with the URL your app will be served on (by default, `"https://<your-app-name>.fly.dev"`).   
 
For sensitive data, you can set **secrets** with the [`fly secrets set`](https://fly.io/docs/flyctl/secrets-set/) command:

```cmd
fly secrets set SOME_SECRET_KEY=<the-value-from-your-env-file>
```

### Deploy

Finally, run `fly deploy` to build and deploy your application!

You should be able to visit `https://your-app-name.fly.dev` and see the Laravel demo home page.

<%= partial "partials/launched" %>

## _What Just Happened?_

The `fly launch` command added a few files to your code base. Don't worry, it asks before over-writing anything.

Here is what's added:

1. `Dockerfile` - Used to build a container image that is run in fly
2. `.dockerignore` - Used to ensure certain files don't make its way into your repository
3. `fly.toml` - Configuration specific to hosting on Fly
4. `docker` - A directory containing configuration files for running Nginx/PHP in a container

Running `fly deploy` uses the `Dockerfile` to build a container image, copying your application files into the resulting image.

Fly doesn't care about the state of your git repository - it copies whatever files are present (except for files ignored by `.dockerignore`).

## _CRON and Queues_

You may need to run Laravel's scheduler or queue workers.

The included `docker/supervisor.conf` comes with presets for both!

### Scheduler (CRON)

File `docker/crontab` defines a CRON task that runs the `schedule:run` command.

You can edit that file to add/remove cron tasks as needed.

To get CRON tasks running in your app, edit file `docker/supervisor.conf` and uncomment section `[program:laravel-schedule]`:

```ini
[program:laravel-schedule]
numprocs=1
autostart=true
autorestart=true
redirect_stderr=true
process_name=%(program_name)s_%(process_num)02d
command=/usr/sbin/crond -f -l 8
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
```

This will run `crond` the next time you deploy via `fly deploy`.

### Queue Workers

The `docker/supervisor.conf` file also has a preset for running queue workers.

To enable those, uncomment the `[program:laravel-queue]` program:

```ini
[program:laravel-queue]
user=app
numprocs=1 ;numprocs=5
autostart=true
autorestart=true
redirect_stderr=true
process_name=%(program_name)s_%(process_num)02d
command=php /var/www/html/artisan queue:work sqs --sleep=3 --tries=3 --backoff=3 --max-time=3600
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
```

You'll want to edit the above to use the driver of your choice, or configure multiple worker processes.

## Extra Credit

Your app is a special snowflake. Here's a few things you may want to customize further!

### PHP Version

The `Dockerfile` installs PHP 8.0 by default. If you want PHP 8.1 or (bless your heart) PHP 7, you can find/replace instances of `php8` to your version of choice.

For example, to update to PHP 8.1, you may need to edit:

1. Package names (e.g. `php8-cli` to `php81-cli`)
2. Directories references (e.g. `/etc/php8` to `/etc/php81`)
3. Configuration references (e.g. `/var/run/php/php8-fpm.sock` to `/var/run/php/php81-fpm.sock`)

If you need PHP 7, you can find other PHP versions (and matching Alpine container versions) [here](https://github.com/codecasts/php-alpine). Note that you may not be able to use `alpine:edge` as the base container.

### Node Version

The `Dockerfile` uses fancy [multi-stage](https://docs.docker.com/develop/develop-images/multistage-build/) builds to install your Node dependencies and build static assets.

You can change the Node version used in the `Dockerfile` by changing `FROM node:14` to a [version of your choice](https://hub.docker.com/_/node).

```docker
# Change this:
FROM node:14 as node_modules_go_brrr

# To whatever version you need:
FROM node:16 as node_modules_go_brrr
```

One last note: The `node_modules` directory ends up being excluded from your code base. If you need it, you'll have to adjust the `Dockerfile`:

```docker
# Keep this line
COPY --from=node_modules_go_brrr /app/public /var/www/html/public
# Add this line:
COPY --from=node_modules_go_brrr /app/node_modules /var/www/html/node_modules
```