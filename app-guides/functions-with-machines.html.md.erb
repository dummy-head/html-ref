---
title: Running user code on Fly Machines
layout: docs
sitemap: false
nav: firecracker
---

[Fly Machines](/docs/reference/machines) are API-driven Firecracker micro VMs. One use for them is running user code to extend your service, or as a service in itself. People sometimes call this **Functions-as-a-Service (FaaS)**.

User code is fraught with peril. Fly Machines run it safely - even the most awful, buggy, and downright hostile user code.
Most FaaS work similarly. The general idea: package up users' code, define a runtime environment, launch the code in a VM, then turn the VM off when it idles to save on compute bills. All while charging users per request!

Packaging user code as a Docker image is mostly up to you. The rest, we can help with.

## Working with the Machines API

Machines are operated over a simple REST API. First, visit the [Machines documentation](/docs/reference/machines) to get ready for this guide.

## Grab or create a runtime Docker image

Your function-as-a-service needs a well-defined runtime environment that can boot user code and then shut it down when it's idle.

Here we'll use a [simple Fastify server](https://github.com/fly-apps/fastify-functions) running behind a small Golang HTTP proxy that exits after a few minutes of inactivity.

## Create an app

Create the required application to group machines together. This application is also the gateway to accessing the machines from the internet.

<%= partial "../reference/machines/create_app" %>

Allocate an IP address to the app. This makes our app accessible at the IP and from `my-awesome-machines-app.fly.dev`.

```cmd
fly ips allocate-v4 -a my-awesome-machines-app
````

## Launch a new machine

Launch a user machine by supplying a Docker image, memory/CPU requirements, and a networking configuration:

<%= partial "../reference/machines/launch" %>

Machines are permanent, so keep the ID around for later.

Your users' service will boot immediately after this API call. Launch speed is a function of image size. Tiny images should boot in less than 2 seconds. Large, complex images are much slower to boot.

Try accessing your new machine at `https://my-awesome-machines-app.fly.dev`. If no requests arrive within 4 seconds, it will exit, but a request will start it back up again automatically.

## Stop a machine

You may stop a machine with an API call:

<%= partial "../reference/machines/stop" %>

## Start an existing machine manually

Once created, a machine may be stopped and started until you delete it. The good news is, images stay cached after first launch. Starting an existing machine is very fast.

Remember that ID you saved from the launch API call? Use it to start the existing machine:

<%= partial "../reference/machines/start" %>

The start API call only returns successfully if the machine is in a stopped state. It's safe to call start on a running machine, though. If you're unsure of the machine state, just call start and ignore the error response.

Start operations clear filesystem changes. The user process comes up with a fresh runtime environment. It is safe to share machines between users, as long as you stop them before they get reassigned.

In a FaaS environment, you'll usually want to wait for a machine to exit. You can stop them with an API call, however, if needed.

## Delete a machine

When you're done, delete the machine:

<%= partial "../reference/machines/delete" %>


